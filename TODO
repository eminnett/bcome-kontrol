

DISABLE
  when saving, do not include sub nodes where parent is disabled.\
  then, need a way of collapsing nodes from different networks into one view

Backlog

A. bcome cacheing strategy

1. some views need to be cached, others not (e.g. auto-scaling groups, or anything containing
non long-lived nodes, or just not generally a static list)

2. We should be able to do the following:

foo:bar:cache     (takes a cache snapshot)
foo:cache
cache

saves to the same view

i.e it’s a process of updating the config file to
  - mars inventories as static-inventories
  - to add in the server nodes

foo:bar:clear_cache  (reverts all inventories to static-inventories)

The config file (or view) is updated and manipulated depending on user action.

B. Implement get & put

C. Menu

D. Orchestration

Aims
- Write scripts that can interact with all machines within a view
- Ability to orchestrate across networks & web hosts, on static or dynamic instances
- Include a generator to generate an orchestration file: this would be an initialization file (so can code around it as part of a bigger framework if we want). Init file to include as minimum
  some comments on top as to how to run it, its namespace etc

* B_PIN represents the tree structure of a view

change “configs” to “views” - a view is a representation of a collection of networks, with exclusions and some cached and non-cached inventories

We need a mechanism to

* Target a view with a basic script
* Script is RUBY, and has access to the B_PIN
* We reference nodes by breamdcrumb namespace

e.g.

resource = B_PIN.get(“foo:bar”)
resource.run
resource.put

Where a resource may be either a collection, static or dynamic inventory, or an individual server

When we run a command, we get the command output returned, with which we can then programmatically “do stuff”

** Can we compile down to bash scripts, and then excuse those natively? ** Do we even need to?

Our orchestration will initiate connections to all machines (like interactive mode) at the start

so

bcome-orch “namespace” script_name

(B_PIN then represents the namespace)

B_PIN.open_connections
… do stuff …

(5) Drivers

Other platforms

digital ocean
rackspace
etc etc

